import openai
import time
import os
from dotenv import load_dotenv

load_dotenv()

api_key = os.getenv('OPENAI_API_KEY')
assistant_id = os.getenv('ASSISTANT_ID')
file_id = os.getenv('FILE_ID')

def generate_blog_content():
    print("Setting up the OpenAI client.")
    # Set up your OpenAI API key
    client = openai.OpenAI(api_key=api_key)

    print("Creating a new thread.")
    # Step 3: Create a thread
    thread = client.beta.threads.create()
    print(f"Thread created with ID: {thread.id}")

    print("Adding a message to the thread.")
    # Step 4: Add a message to the thread
    client.beta.threads.messages.create(
        thread_id=thread.id,
        role="user",
        content=f"Generate a blog using the information in the knowledge base file with ID {file_id}. The blog should address customer pain points and common search queries related to AI integration for businesses and have inbound links to other blogs."
    )

    print("Creating a run for the assistant.")
    # Step 5: Create a Run and get the response
    response = client.beta.threads.runs.create(
        thread_id=thread.id,
        assistant_id=assistant_id,
        instructions="Please generate a comprehensive blog post."
    )
    print(f"Run created with ID: {response.id}, status: {response.status}")

    # Polling the run status
    run_id = response.id
    while True:
        run_status = client.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run_id)
        print(f"Run status: {run_status.status}")
        if run_status.status == 'completed':
            break
        elif run_status.status in ['failed', 'cancelled']:
            return "The assistant failed to generate a response."
        time.sleep(5)  # wait for 5 seconds before polling again

    print("Run completed. Retrieving thread messages.")
    # Fetching the completed run response
    thread_response = client.beta.threads.retrieve(thread_id=thread.id)
    print(f"Thread response retrieved")

    # Correctly access the messages
    messages = client.beta.threads.messages.list(thread_id=thread.id)
    print(f"Messages retrieved")

    assistant_message = next(
        (msg for msg in messages.data if msg.role == "assistant"),
        None
    )

    if assistant_message is not None and assistant_message.content:
        # Extract text content from the content list
        text_content = ''.join(block.text.value for block in assistant_message.content if block.type == 'text')
        return text_content.strip()
    else:
        return "No content generated by the assistant."
